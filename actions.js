import Squirm from './Squirm.js'

//functional representation of actions on squimr
const addTickFunctional = (s) => (dataPoint) => {
    // s.weird.push(data)
    Object.keys(s.data).forEach(key => {
        let newVal = dataPoint[key]
        if (!key in dataPoint) {
            // todo get last value here
            console.warn(`missing data for ${key}, using last value instead`)
        }
        s.data[key].push(newVal)
    })
    return s
}

const _addTick = (s, payload) => {
    // s.weird.push(data)
    Object.keys(s.data).forEach(key => {
        let newVal = payload[key]
        if (!key in payload) {
            // todo get last value here
            console.warn(`missing data for ${key}, using last value instead`)
        }
        s.data[key].push(newVal)
    })
    return s
}

const addTick = () => {
    // clone
    // _addTick
}


// main.js

import actions

if (actios[name])


const addTick = (...params) => {
    if(params.length > 1) {
        return 
    } else {
       return addTickFunctional
    }
}
addTick(s) => returns a function 
addTick(s, data)

const cloneSquirm = (s) => {
    const newSquirm = new Squirm()
    newSquirm.data = JSON.parse(JSON.stringify(s.data))
    newSquirm.metadata = Object.assign({}, s.metadata)
    return newSquirm
}

const squirmActions = {
    'cloneSquirm': cloneSquirm
}

const squirmActionsThatNeedCloning = {
    'addTick': addTickFunctional
}

// functions and methods generated by computer
const addTick = (s, data) => {
    const clone = cloneSquirm(s)
    addTickFunctional(clone)(data)
    console.log(s.data.x, clone.data.x)
    return clone
}





export Object.assign({}, squirmActions, actionsToExport)




// export { Squirm, addTick = wrap(squirmActions.addTick) }



////






